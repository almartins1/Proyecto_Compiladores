//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.11.1
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from DUN.g4 by ANTLR 4.11.1

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

using System;
using System.IO;
using System.Text;
using System.Diagnostics;
using System.Collections.Generic;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.11.1")]
[System.CLSCompliant(false)]
public partial class DUNParser : Parser {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		T__0=1, T__1=2, T__2=3, T__3=4, Begin=5, Axiom=6, Rol=7, Gen=8, Equals=9, 
		Dificult=10, Whitespace=11, Newline=12;
	public const int
		RULE_file = 0, RULE_assignment = 1;
	public static readonly string[] ruleNames = {
		"file", "assignment"
	};

	private static readonly string[] _LiteralNames = {
		null, "'Axiom'", "'Rules'", "'|'", "'Gen'", null, null, null, null, "'='"
	};
	private static readonly string[] _SymbolicNames = {
		null, null, null, null, null, "Begin", "Axiom", "Rol", "Gen", "Equals", 
		"Dificult", "Whitespace", "Newline"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "DUN.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override int[] SerializedAtn { get { return _serializedATN; } }

	static DUNParser() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}

		public DUNParser(ITokenStream input) : this(input, Console.Out, Console.Error) { }

		public DUNParser(ITokenStream input, TextWriter output, TextWriter errorOutput)
		: base(input, output, errorOutput)
	{
		Interpreter = new ParserATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}

	public partial class FileContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public AssignmentContext assignment() {
			return GetRuleContext<AssignmentContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Eof() { return GetToken(DUNParser.Eof, 0); }
		public FileContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_file; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IDUNListener typedListener = listener as IDUNListener;
			if (typedListener != null) typedListener.EnterFile(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IDUNListener typedListener = listener as IDUNListener;
			if (typedListener != null) typedListener.ExitFile(this);
		}
	}

	[RuleVersion(0)]
	public FileContext file() {
		FileContext _localctx = new FileContext(Context, State);
		EnterRule(_localctx, 0, RULE_file);
		try {
			State = 6;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case Begin:
				EnterOuterAlt(_localctx, 1);
				{
				State = 4;
				assignment();
				}
				break;
			case Eof:
				EnterOuterAlt(_localctx, 2);
				{
				State = 5;
				Match(Eof);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AssignmentContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Begin() { return GetToken(DUNParser.Begin, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] Equals() { return GetTokens(DUNParser.Equals); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Equals(int i) {
			return GetToken(DUNParser.Equals, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Axiom() { return GetToken(DUNParser.Axiom, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] Rol() { return GetTokens(DUNParser.Rol); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Rol(int i) {
			return GetToken(DUNParser.Rol, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Gen() { return GetToken(DUNParser.Gen, 0); }
		public AssignmentContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_assignment; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IDUNListener typedListener = listener as IDUNListener;
			if (typedListener != null) typedListener.EnterAssignment(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IDUNListener typedListener = listener as IDUNListener;
			if (typedListener != null) typedListener.ExitAssignment(this);
		}
	}

	[RuleVersion(0)]
	public AssignmentContext assignment() {
		AssignmentContext _localctx = new AssignmentContext(Context, State);
		EnterRule(_localctx, 2, RULE_assignment);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 8;
			Match(Begin);
			State = 9;
			Match(T__0);
			State = 10;
			Match(Equals);
			State = 11;
			Match(Axiom);
			State = 12;
			Match(T__1);
			State = 13;
			Match(Equals);
			State = 14;
			Match(Rol);
			State = 19;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==T__2) {
				{
				{
				State = 15;
				Match(T__2);
				State = 16;
				Match(Rol);
				}
				}
				State = 21;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 22;
			Match(T__3);
			State = 23;
			Match(Equals);
			State = 24;
			Match(Gen);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	private static int[] _serializedATN = {
		4,1,12,27,2,0,7,0,2,1,7,1,1,0,1,0,3,0,7,8,0,1,1,1,1,1,1,1,1,1,1,1,1,1,
		1,1,1,1,1,5,1,18,8,1,10,1,12,1,21,9,1,1,1,1,1,1,1,1,1,1,1,0,0,2,0,2,0,
		0,26,0,6,1,0,0,0,2,8,1,0,0,0,4,7,3,2,1,0,5,7,5,0,0,1,6,4,1,0,0,0,6,5,1,
		0,0,0,7,1,1,0,0,0,8,9,5,5,0,0,9,10,5,1,0,0,10,11,5,9,0,0,11,12,5,6,0,0,
		12,13,5,2,0,0,13,14,5,9,0,0,14,19,5,7,0,0,15,16,5,3,0,0,16,18,5,7,0,0,
		17,15,1,0,0,0,18,21,1,0,0,0,19,17,1,0,0,0,19,20,1,0,0,0,20,22,1,0,0,0,
		21,19,1,0,0,0,22,23,5,4,0,0,23,24,5,9,0,0,24,25,5,8,0,0,25,3,1,0,0,0,2,
		6,19
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
