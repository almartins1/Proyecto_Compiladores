//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.11.1
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from DUN.g4 by ANTLR 4.11.1

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

using System;
using System.IO;
using System.Text;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.11.1")]
[System.CLSCompliant(false)]
public partial class DUNLexer : Lexer {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		T__0=1, T__1=2, T__2=3, T__3=4, T__4=5, T__5=6, Begin=7, Axiom=8, Rol=9, 
		Gen=10, Equals=11, Dificult=12, Whitespace=13, Newline=14;
	public static string[] channelNames = {
		"DEFAULT_TOKEN_CHANNEL", "HIDDEN"
	};

	public static string[] modeNames = {
		"DEFAULT_MODE"
	};

	public static readonly string[] ruleNames = {
		"T__0", "T__1", "T__2", "T__3", "T__4", "T__5", "Begin", "Axiom", "Rol", 
		"Gen", "Equals", "Dificult", "Whitespace", "Newline"
	};


	public DUNLexer(ICharStream input)
	: this(input, Console.Out, Console.Error) { }

	public DUNLexer(ICharStream input, TextWriter output, TextWriter errorOutput)
	: base(input, output, errorOutput)
	{
		Interpreter = new LexerATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}

	private static readonly string[] _LiteralNames = {
		null, "'Axiom'", "'Rules'", "'|'", "'Gen'", "'('", "')'", null, null, 
		null, null, "'='"
	};
	private static readonly string[] _SymbolicNames = {
		null, null, null, null, null, null, null, "Begin", "Axiom", "Rol", "Gen", 
		"Equals", "Dificult", "Whitespace", "Newline"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "DUN.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override string[] ChannelNames { get { return channelNames; } }

	public override string[] ModeNames { get { return modeNames; } }

	public override int[] SerializedAtn { get { return _serializedATN; } }

	static DUNLexer() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}
	private static int[] _serializedATN = {
		4,0,14,155,6,-1,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,2,6,7,
		6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,13,7,13,1,0,
		1,0,1,0,1,0,1,0,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,2,1,2,1,3,1,3,1,3,1,3,1,
		4,1,4,1,5,1,5,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,3,6,64,8,
		6,1,7,4,7,67,8,7,11,7,12,7,68,1,7,4,7,72,8,7,11,7,12,7,73,1,8,4,8,77,8,
		8,11,8,12,8,78,1,8,1,8,1,8,4,8,84,8,8,11,8,12,8,85,1,8,4,8,89,8,8,11,8,
		12,8,90,1,8,1,8,4,8,95,8,8,11,8,12,8,96,1,8,4,8,100,8,8,11,8,12,8,101,
		3,8,104,8,8,1,8,3,8,107,8,8,4,8,109,8,8,11,8,12,8,110,4,8,113,8,8,11,8,
		12,8,114,1,9,4,9,118,8,9,11,9,12,9,119,1,10,1,10,1,11,1,11,1,11,1,11,1,
		11,1,11,1,11,1,11,1,11,1,11,1,11,1,11,1,11,1,11,3,11,138,8,11,1,12,4,12,
		141,8,12,11,12,12,12,142,1,12,1,12,1,13,1,13,3,13,149,8,13,1,13,3,13,152,
		8,13,1,13,1,13,0,0,14,1,1,3,2,5,3,7,4,9,5,11,6,13,7,15,8,17,9,19,10,21,
		11,23,12,25,13,27,14,1,0,5,1,0,65,90,4,0,43,43,45,45,91,91,93,93,2,0,43,
		43,45,45,1,0,48,57,2,0,9,9,32,32,175,0,1,1,0,0,0,0,3,1,0,0,0,0,5,1,0,0,
		0,0,7,1,0,0,0,0,9,1,0,0,0,0,11,1,0,0,0,0,13,1,0,0,0,0,15,1,0,0,0,0,17,
		1,0,0,0,0,19,1,0,0,0,0,21,1,0,0,0,0,23,1,0,0,0,0,25,1,0,0,0,0,27,1,0,0,
		0,1,29,1,0,0,0,3,35,1,0,0,0,5,41,1,0,0,0,7,43,1,0,0,0,9,47,1,0,0,0,11,
		49,1,0,0,0,13,63,1,0,0,0,15,71,1,0,0,0,17,112,1,0,0,0,19,117,1,0,0,0,21,
		121,1,0,0,0,23,137,1,0,0,0,25,140,1,0,0,0,27,151,1,0,0,0,29,30,5,65,0,
		0,30,31,5,120,0,0,31,32,5,105,0,0,32,33,5,111,0,0,33,34,5,109,0,0,34,2,
		1,0,0,0,35,36,5,82,0,0,36,37,5,117,0,0,37,38,5,108,0,0,38,39,5,101,0,0,
		39,40,5,115,0,0,40,4,1,0,0,0,41,42,5,124,0,0,42,6,1,0,0,0,43,44,5,71,0,
		0,44,45,5,101,0,0,45,46,5,110,0,0,46,8,1,0,0,0,47,48,5,40,0,0,48,10,1,
		0,0,0,49,50,5,41,0,0,50,12,1,0,0,0,51,52,5,68,0,0,52,53,5,85,0,0,53,54,
		5,78,0,0,54,64,5,69,0,0,55,56,5,65,0,0,56,57,5,85,0,0,57,58,5,84,0,0,58,
		59,5,79,0,0,59,60,5,68,0,0,60,61,5,85,0,0,61,62,5,78,0,0,62,64,5,69,0,
		0,63,51,1,0,0,0,63,55,1,0,0,0,64,14,1,0,0,0,65,67,7,0,0,0,66,65,1,0,0,
		0,67,68,1,0,0,0,68,66,1,0,0,0,68,69,1,0,0,0,69,72,1,0,0,0,70,72,7,1,0,
		0,71,66,1,0,0,0,71,70,1,0,0,0,72,73,1,0,0,0,73,71,1,0,0,0,73,74,1,0,0,
		0,74,16,1,0,0,0,75,77,7,0,0,0,76,75,1,0,0,0,77,78,1,0,0,0,78,76,1,0,0,
		0,78,79,1,0,0,0,79,80,1,0,0,0,80,108,5,58,0,0,81,88,5,91,0,0,82,84,7,0,
		0,0,83,82,1,0,0,0,84,85,1,0,0,0,85,83,1,0,0,0,85,86,1,0,0,0,86,89,1,0,
		0,0,87,89,7,2,0,0,88,83,1,0,0,0,88,87,1,0,0,0,89,90,1,0,0,0,90,88,1,0,
		0,0,90,91,1,0,0,0,91,92,1,0,0,0,92,104,5,93,0,0,93,95,7,0,0,0,94,93,1,
		0,0,0,95,96,1,0,0,0,96,94,1,0,0,0,96,97,1,0,0,0,97,100,1,0,0,0,98,100,
		7,2,0,0,99,94,1,0,0,0,99,98,1,0,0,0,100,101,1,0,0,0,101,99,1,0,0,0,101,
		102,1,0,0,0,102,104,1,0,0,0,103,81,1,0,0,0,103,99,1,0,0,0,104,106,1,0,
		0,0,105,107,5,44,0,0,106,105,1,0,0,0,106,107,1,0,0,0,107,109,1,0,0,0,108,
		103,1,0,0,0,109,110,1,0,0,0,110,108,1,0,0,0,110,111,1,0,0,0,111,113,1,
		0,0,0,112,76,1,0,0,0,113,114,1,0,0,0,114,112,1,0,0,0,114,115,1,0,0,0,115,
		18,1,0,0,0,116,118,7,3,0,0,117,116,1,0,0,0,118,119,1,0,0,0,119,117,1,0,
		0,0,119,120,1,0,0,0,120,20,1,0,0,0,121,122,5,61,0,0,122,22,1,0,0,0,123,
		124,5,69,0,0,124,125,5,97,0,0,125,126,5,115,0,0,126,138,5,121,0,0,127,
		128,5,77,0,0,128,129,5,101,0,0,129,130,5,100,0,0,130,131,5,105,0,0,131,
		132,5,117,0,0,132,138,5,109,0,0,133,134,5,72,0,0,134,135,5,97,0,0,135,
		136,5,114,0,0,136,138,5,100,0,0,137,123,1,0,0,0,137,127,1,0,0,0,137,133,
		1,0,0,0,138,24,1,0,0,0,139,141,7,4,0,0,140,139,1,0,0,0,141,142,1,0,0,0,
		142,140,1,0,0,0,142,143,1,0,0,0,143,144,1,0,0,0,144,145,6,12,0,0,145,26,
		1,0,0,0,146,148,5,13,0,0,147,149,5,10,0,0,148,147,1,0,0,0,148,149,1,0,
		0,0,149,152,1,0,0,0,150,152,5,10,0,0,151,146,1,0,0,0,151,150,1,0,0,0,152,
		153,1,0,0,0,153,154,6,13,0,0,154,28,1,0,0,0,21,0,63,68,71,73,78,85,88,
		90,96,99,101,103,106,110,114,119,137,142,148,151,1,6,0,0
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
